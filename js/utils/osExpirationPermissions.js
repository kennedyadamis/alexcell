/**
 * Utilit√°rios para verifica√ß√£o de permiss√µes de configura√ß√£o de expira√ß√£o de OS
 */

import { supabase } from '../api/supabase.js';
import { dbSelect } from './authInterceptor.js';
import { getSelectedStoreId } from './globals.js';

// Cache das permiss√µes do usu√°rio atual
let userExpirationPermissions = null;

/**
 * Verifica se o usu√°rio atual tem permiss√£o para configurar expira√ß√£o de OS
 * @returns {Promise<boolean>}
 */
export async function canManageOSExpiration() {
    try {
        // Se j√° temos as permiss√µes em cache, usar elas
        if (userExpirationPermissions !== null) {
            return userExpirationPermissions;
        }

        // Buscar permiss√µes do usu√°rio atual
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) {
            userExpirationPermissions = false;
            return false;
        }

        const { data: permissions, error } = await dbSelect('user_store_permissions', {
            select: 'can_manage_os_expiration',
            eq: { user_id: user.id }
        });

        if (error || !permissions || permissions.length === 0) {
            userExpirationPermissions = false;
            return false;
        }

        // Verificar se tem permiss√£o em pelo menos uma loja
        userExpirationPermissions = permissions.some(p => p.can_manage_os_expiration);
        return userExpirationPermissions;
    } catch (error) {
        console.error('Erro ao verificar permiss√µes de configura√ß√£o de expira√ß√£o:', error);
        userExpirationPermissions = false;
        return false;
    }
}

/**
 * Limpa o cache de permiss√µes (usar quando as permiss√µes mudarem)
 */
export function clearExpirationPermissionsCache() {
    userExpirationPermissions = null;
}

/**
 * Oculta ou desabilita a se√ß√£o de configura√ß√£o de expira√ß√£o se o usu√°rio n√£o tiver permiss√£o
 */
export async function applyExpirationPermissions() {
    const hasPermission = await canManageOSExpiration();
    const expirationSection = document.getElementById('os-expiration-config-section');
    
    if (!hasPermission && expirationSection) {
        // Adicionar uma mensagem de permiss√£o negada
        expirationSection.innerHTML = `
            <h3>‚è∞ Tempo de Expira√ß√£o de Ordens de Servi√ßo</h3>
            <div class="permission-denied-message">
                <div class="alert alert-warning">
                    <strong>üîí Acesso Restrito</strong>
                    <p>Voc√™ n√£o tem permiss√£o para modificar as configura√ß√µes de tempo de expira√ß√£o de ordens de servi√ßo.</p>
                    <p>Entre em contato com um administrador para solicitar acesso.</p>
                </div>
            </div>
        `;
        expirationSection.style.opacity = '0.6';
    }
}

/**
 * Verifica permiss√µes antes de permitir salvamento da configura√ß√£o
 * @returns {Promise<boolean>}
 */
export async function validateExpirationSavePermission() {
    const hasPermission = await canManageOSExpiration();
    
    if (!hasPermission) {
        alert('‚ùå Voc√™ n√£o tem permiss√£o para modificar as configura√ß√µes de tempo de expira√ß√£o de ordens de servi√ßo.');
        return false;
    }
    
    return true;
}